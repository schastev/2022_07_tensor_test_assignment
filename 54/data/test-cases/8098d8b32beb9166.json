{"uid":"8098d8b32beb9166","name":"Поиск в яндексе","fullName":"test.test_tensor.TensorTestCase#test_search","historyId":"6bc54fbf095856b02ce30f6849fa7bbe","time":{"start":1659723166606,"stop":1659723175000,"duration":8394},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n#0 0x56380c017b13 <unknown>\n#1 0x56380be1e688 <unknown>\n#2 0x56380be0bd58 <unknown>\n#3 0x56380be0b372 <unknown>\n#4 0x56380be0a815 <unknown>\n#5 0x56380be094df <unknown>\n#6 0x56380be09a9c <unknown>\n#7 0x56380be16dde <unknown>\n#8 0x56380be17682 <unknown>\n#9 0x56380be25c2d <unknown>\n#10 0x56380be29b4a <unknown>\n#11 0x56380be09ec6 <unknown>\n#12 0x56380be257d1 <unknown>\n#13 0x56380be86f98 <unknown>\n#14 0x56380be737a3 <unknown>\n#15 0x56380be490ea <unknown>\n#16 0x56380be4a225 <unknown>\n#17 0x56380c05f2dd <unknown>\n#18 0x56380c0632c7 <unknown>\n#19 0x56380c04922e <unknown>\n#20 0x56380c0640a8 <unknown>\n#21 0x56380c03dbc0 <unknown>\n#22 0x56380c0806c8 <unknown>\n#23 0x56380c080848 <unknown>\n#24 0x56380c09ac0d <unknown>\n#25 0x7f23666a5609 <unknown>","statusTrace":"self = <test.test_tensor.TensorTestCase testMethod=test_search>\n\n    @allure.title('Поиск в яндексе')\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_search(self):\n        self.hp.search_form.input_query(\"Тензор\")\n        self.hp.search_form.submit()\n    \n        sr = Text_Search_Results()\n>       sr.assert_top_result_leads_to_site('tensor.ru')\n\ntest/test_tensor.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/search_results.py:107: in assert_top_result_leads_to_site\n    top_result = self.get_top_result()\nsrc/pages/search_results.py:98: in get_top_result\n    top = self.results.areas[0]\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py:82: in areas\n    return self.children()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py:98: in children\n    all_roots = self._all_roots()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating.py:105: in _all_roots\n    all_roots = self.root.find_all()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/fields/field.py:257: in find_all\n    return self._element.find(wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/element_strategy.py:43: in find\n    return self._find_all(wait_time=wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/splinter.py:119: in _find_all\n    return func(self.locator, wait_time=wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:504: in find_by_xpath\n    return self.find_by(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:273: in find_by\n    elem_list = _find(self, finder, finder_kwargs)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:226: in _find\n    elements = finder(**finder_kwargs)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:890: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6606ea2920>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...\\\\n#23 0x56380c080848 \\\\u003Cunknown>\\\\n#24 0x56380c09ac0d \\\\u003Cunknown>\\\\n#25 0x7f23666a5609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       #0 0x56380c017b13 <unknown>\nE       #1 0x56380be1e688 <unknown>\nE       #2 0x56380be0bd58 <unknown>\nE       #3 0x56380be0b372 <unknown>\nE       #4 0x56380be0a815 <unknown>\nE       #5 0x56380be094df <unknown>\nE       #6 0x56380be09a9c <unknown>\nE       #7 0x56380be16dde <unknown>\nE       #8 0x56380be17682 <unknown>\nE       #9 0x56380be25c2d <unknown>\nE       #10 0x56380be29b4a <unknown>\nE       #11 0x56380be09ec6 <unknown>\nE       #12 0x56380be257d1 <unknown>\nE       #13 0x56380be86f98 <unknown>\nE       #14 0x56380be737a3 <unknown>\nE       #15 0x56380be490ea <unknown>\nE       #16 0x56380be4a225 <unknown>\nE       #17 0x56380c05f2dd <unknown>\nE       #18 0x56380c0632c7 <unknown>\nE       #19 0x56380c04922e <unknown>\nE       #20 0x56380c0640a8 <unknown>\nE       #21 0x56380c03dbc0 <unknown>\nE       #22 0x56380c0806c8 <unknown>\nE       #23 0x56380c080848 <unknown>\nE       #24 0x56380c09ac0d <unknown>\nE       #25 0x7f23666a5609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TensorTestCase","time":{"start":1659723143173,"stop":1659723143173,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n#0 0x56380c017b13 <unknown>\n#1 0x56380be1e688 <unknown>\n#2 0x56380be0bd58 <unknown>\n#3 0x56380be0b372 <unknown>\n#4 0x56380be0a815 <unknown>\n#5 0x56380be094df <unknown>\n#6 0x56380be09a9c <unknown>\n#7 0x56380be16dde <unknown>\n#8 0x56380be17682 <unknown>\n#9 0x56380be25c2d <unknown>\n#10 0x56380be29b4a <unknown>\n#11 0x56380be09ec6 <unknown>\n#12 0x56380be257d1 <unknown>\n#13 0x56380be86f98 <unknown>\n#14 0x56380be737a3 <unknown>\n#15 0x56380be490ea <unknown>\n#16 0x56380be4a225 <unknown>\n#17 0x56380c05f2dd <unknown>\n#18 0x56380c0632c7 <unknown>\n#19 0x56380c04922e <unknown>\n#20 0x56380c0640a8 <unknown>\n#21 0x56380c03dbc0 <unknown>\n#22 0x56380c0806c8 <unknown>\n#23 0x56380c080848 <unknown>\n#24 0x56380c09ac0d <unknown>\n#25 0x7f23666a5609 <unknown>","statusTrace":"self = <test.test_tensor.TensorTestCase testMethod=test_search>\n\n    @allure.title('Поиск в яндексе')\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_search(self):\n        self.hp.search_form.input_query(\"Тензор\")\n        self.hp.search_form.submit()\n    \n        sr = Text_Search_Results()\n>       sr.assert_top_result_leads_to_site('tensor.ru')\n\ntest/test_tensor.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/search_results.py:107: in assert_top_result_leads_to_site\n    top_result = self.get_top_result()\nsrc/pages/search_results.py:98: in get_top_result\n    top = self.results.areas[0]\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py:82: in areas\n    return self.children()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py:98: in children\n    all_roots = self._all_roots()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating.py:105: in _all_roots\n    all_roots = self.root.find_all()\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/fields/field.py:257: in find_all\n    return self._element.find(wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/element_strategy.py:43: in find\n    return self._find_all(wait_time=wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/splinter.py:119: in _find_all\n    return func(self.locator, wait_time=wait_time)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:504: in find_by_xpath\n    return self.find_by(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:273: in find_by\n    elem_list = _find(self, finder, finder_kwargs)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py:226: in _find\n    elements = finder(**finder_kwargs)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:890: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6606ea2920>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...\\\\n#23 0x56380c080848 \\\\u003Cunknown>\\\\n#24 0x56380c09ac0d \\\\u003Cunknown>\\\\n#25 0x7f23666a5609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       #0 0x56380c017b13 <unknown>\nE       #1 0x56380be1e688 <unknown>\nE       #2 0x56380be0bd58 <unknown>\nE       #3 0x56380be0b372 <unknown>\nE       #4 0x56380be0a815 <unknown>\nE       #5 0x56380be094df <unknown>\nE       #6 0x56380be09a9c <unknown>\nE       #7 0x56380be16dde <unknown>\nE       #8 0x56380be17682 <unknown>\nE       #9 0x56380be25c2d <unknown>\nE       #10 0x56380be29b4a <unknown>\nE       #11 0x56380be09ec6 <unknown>\nE       #12 0x56380be257d1 <unknown>\nE       #13 0x56380be86f98 <unknown>\nE       #14 0x56380be737a3 <unknown>\nE       #15 0x56380be490ea <unknown>\nE       #16 0x56380be4a225 <unknown>\nE       #17 0x56380c05f2dd <unknown>\nE       #18 0x56380c0632c7 <unknown>\nE       #19 0x56380c04922e <unknown>\nE       #20 0x56380c0640a8 <unknown>\nE       #21 0x56380c03dbc0 <unknown>\nE       #22 0x56380c0806c8 <unknown>\nE       #23 0x56380c080848 <unknown>\nE       #24 0x56380c09ac0d <unknown>\nE       #25 0x7f23666a5609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","steps":[{"name":"Перейти на главную страницу Яндекса","time":{"start":1659723167994,"stop":1659723167994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Ввести \"'Тензор'\" в строку поиска","time":{"start":1659723173979,"stop":1659723174415,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"query","value":"'Тензор'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Перейти на страницу результатов поиска","time":{"start":1659723174621,"stop":1659723174621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверить, что ссылка в первом результате поиска содержит 'tensor.ru'","time":{"start":1659723174621,"stop":1659723174941,"duration":320},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n#0 0x56380c017b13 <unknown>\n#1 0x56380be1e688 <unknown>\n#2 0x56380be0bd58 <unknown>\n#3 0x56380be0b372 <unknown>\n#4 0x56380be0a815 <unknown>\n#5 0x56380be094df <unknown>\n#6 0x56380be09a9c <unknown>\n#7 0x56380be16dde <unknown>\n#8 0x56380be17682 <unknown>\n#9 0x56380be25c2d <unknown>\n#10 0x56380be29b4a <unknown>\n#11 0x56380be09ec6 <unknown>\n#12 0x56380be257d1 <unknown>\n#13 0x56380be86f98 <unknown>\n#14 0x56380be737a3 <unknown>\n#15 0x56380be490ea <unknown>\n#16 0x56380be4a225 <unknown>\n#17 0x56380c05f2dd <unknown>\n#18 0x56380c0632c7 <unknown>\n#19 0x56380c04922e <unknown>\n#20 0x56380c0640a8 <unknown>\n#21 0x56380c03dbc0 <unknown>\n#22 0x56380c0806c8 <unknown>\n#23 0x56380c080848 <unknown>\n#24 0x56380c09ac0d <unknown>\n#25 0x7f23666a5609 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/2022_07_test_assignment/2022_07_test_assignment/src/pages/search_results.py\", line 107, in assert_top_result_leads_to_site\n    top_result = self.get_top_result()\n  File \"/home/runner/work/2022_07_test_assignment/2022_07_test_assignment/src/pages/search_results.py\", line 98, in get_top_result\n    top = self.results.areas[0]\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py\", line 82, in areas\n    return self.children()\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating_area.py\", line 98, in children\n    all_roots = self._all_roots()\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/areas/repeating.py\", line 105, in _all_roots\n    all_roots = self.root.find_all()\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/fields/field.py\", line 257, in find_all\n    return self._element.find(wait_time)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/element_strategy.py\", line 43, in find\n    return self._find_all(wait_time=wait_time)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/stere/strategy/splinter.py\", line 119, in _find_all\n    return func(self.locator, wait_time=wait_time)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py\", line 504, in find_by_xpath\n    return self.find_by(\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py\", line 273, in find_by\n    elem_list = _find(self, finder, finder_kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/splinter/driver/webdriver/__init__.py\", line 226, in _find\n    elements = finder(**finder_kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 890, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 435, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"site","value":"'tensor.ru'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TensorTestCase::0","time":{"start":1659723175169,"stop":1659723175169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"severity","value":"normal"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_tensor"},{"name":"subSuite","value":"TensorTestCase"},{"name":"host","value":"fv-az246-402"},{"name":"thread","value":"2961-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_tensor"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":7,"skipped":0,"passed":10,"unknown":0,"total":26},"items":[{"uid":"bfb7a086f890aa54","reportUrl":"https://schastev.github.io/2022_07_test_assignment/54//#testresult/bfb7a086f890aa54","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659722991070,"stop":1659722995306,"duration":4236}},{"uid":"e3545bd2ec6d4879","reportUrl":"https://schastev.github.io/2022_07_test_assignment/53//#testresult/e3545bd2ec6d4879","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f82b8aafc70>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1659722906285,"stop":1659722906303,"duration":18}},{"uid":"8924e2b3b854189b","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/52//#testresult/8924e2b3b854189b","status":"passed","time":{"start":1659265105488,"stop":1659265113467,"duration":7979}},{"uid":"e8655384eb6d0846","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/51//#testresult/e8655384eb6d0846","status":"passed","time":{"start":1659264808958,"stop":1659264818605,"duration":9647}},{"uid":"c3d1af18aca70690","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/50//#testresult/c3d1af18aca70690","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659264282285,"stop":1659264286357,"duration":4072}},{"uid":"6b54083ac4c84f80","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/50//#testresult/6b54083ac4c84f80","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659263969206,"stop":1659263973747,"duration":4541}},{"uid":"98a255a089cb54f4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/50//#testresult/98a255a089cb54f4","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n#0 0x562c48445b13 <unknown>\n#1 0x562c4824c688 <unknown>\n#2 0x562c48239d58 <unknown>\n#3 0x562c48239372 <unknown>\n#4 0x562c48238815 <unknown>\n#5 0x562c482374df <unknown>\n#6 0x562c48237a9c <unknown>\n#7 0x562c48244dde <unknown>\n#8 0x562c48245682 <unknown>\n#9 0x562c48253c2d <unknown>\n#10 0x562c48257b4a <unknown>\n#11 0x562c48237ec6 <unknown>\n#12 0x562c482537d1 <unknown>\n#13 0x562c482b4f98 <unknown>\n#14 0x562c482a17a3 <unknown>\n#15 0x562c482770ea <unknown>\n#16 0x562c48278225 <unknown>\n#17 0x562c4848d2dd <unknown>\n#18 0x562c484912c7 <unknown>\n#19 0x562c4847722e <unknown>\n#20 0x562c484920a8 <unknown>\n#21 0x562c4846bbc0 <unknown>\n#22 0x562c484ae6c8 <unknown>\n#23 0x562c484ae848 <unknown>\n#24 0x562c484c8c0d <unknown>\n#25 0x7fb7de073609 <unknown>","time":{"start":1659263807248,"stop":1659263818954,"duration":11706}},{"uid":"a2544151ed3161a4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/50//#testresult/a2544151ed3161a4","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659263661584,"stop":1659263664928,"duration":3344}},{"uid":"314cf662f74ebb60","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/49//#testresult/314cf662f74ebb60","status":"passed","time":{"start":1659263262705,"stop":1659263270526,"duration":7821}},{"uid":"a24222df42d5e3f4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/48//#testresult/a24222df42d5e3f4","status":"passed","time":{"start":1659263026358,"stop":1659263037083,"duration":10725}},{"uid":"7c2b3a96e14429b4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/48//#testresult/7c2b3a96e14429b4","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659262837550,"stop":1659262841839,"duration":4289}},{"uid":"20a36651f92527f4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/47//#testresult/20a36651f92527f4","status":"passed","time":{"start":1659262483372,"stop":1659262492523,"duration":9151}},{"uid":"4b6a0ab9426370c4","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/46//#testresult/4b6a0ab9426370c4","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659260652268,"stop":1659260656011,"duration":3743}},{"uid":"af5ff71f222815b7","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/45//#testresult/af5ff71f222815b7","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fd447e6f280>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1659258678618,"stop":1659258678636,"duration":18}},{"uid":"cf36edd120614426","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/44//#testresult/cf36edd120614426","status":"passed","time":{"start":1659255982847,"stop":1659255993328,"duration":10481}},{"uid":"b8ad27141c1a2f2f","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/43//#testresult/b8ad27141c1a2f2f","status":"passed","time":{"start":1659206695241,"stop":1659206703371,"duration":8130}},{"uid":"97ddcfddabefef54","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/42//#testresult/97ddcfddabefef54","status":"passed","time":{"start":1659200003924,"stop":1659200011945,"duration":8021}},{"uid":"c04c0b21b2d69114","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/41//#testresult/c04c0b21b2d69114","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659196944510,"stop":1659196948898,"duration":4388}},{"uid":"f15ecdbddc4c1521","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/39//#testresult/f15ecdbddc4c1521","status":"passed","time":{"start":1659194313648,"stop":1659194321808,"duration":8160}},{"uid":"ec1264e8fcc5b76d","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/38//#testresult/ec1264e8fcc5b76d","status":"failed","statusDetails":"AssertionError: Открылась страница с капчей\nassert False","time":{"start":1659193962930,"stop":1659193966576,"duration":3646}}]},"tags":[]},"source":"8098d8b32beb9166.json","parameterValues":[]}