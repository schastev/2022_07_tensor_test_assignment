{"uid":"c1e091dab22d7fab","name":"Картинки в яндексе","fullName":"test.test_tensor.TensorTestCase#test_pictures","historyId":"9214267beedc59fe8c2f8d4f710a67a6","time":{"start":1659199986223,"stop":1659200003873,"duration":17650},"status":"failed","statusMessage":"AssertionError: Текущая картинка не равна эталонной","statusTrace":"self = <test.test_tensor.TensorTestCase testMethod=test_pictures>\n\n    @allure.title('Картинки в яндексе')\n    def test_pictures(self):\n        self.hp.navigation.click_navigation(\"Картинки\", True, Stere.browser)\n        ip = Images_Page(Stere.browser)\n        top_category = ip.popular_items.get_top_item()\n    \n        sr = ip.popular_items.click_category(top_category)\n        sr.search_form.assert_query(top_category)\n        top_result = sr.get_top_result()\n    \n        iv = sr.click_result(top_result)\n        top_image = iv.download_current_image()\n        iv.next()\n        iv.compare_images(False, top_image)\n        iv.prev()\n>       iv.compare_images(True, top_image)\n\ntest/test_tensor.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.pages.search_results.Image_Viewer object at 0x7efc1c7dbe20>\nshould_equal = True\nother_image = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xff\\xdb\\x00C\\x00\\x05\\x04\\x04\\x05\\x04\\x03\\x05\\x0...b8\\xc7j\\xa1\\xdb\\xcbs\\x1d\\xcb\\xd8\\xa9e\\x90\\x1cl\\r\\xbb\\x1dz\\x83]\\xbe\\x97\\xe2\\x99\\\\\\xbcK\\x04h\\xdd\\x17+\\xc5&\\xe8kg\\xff\\xd9'\n\n    @allure.step(\"Сравнить текущую картинку с эталонной. Ожидаемый результат сравнения: {1}\")\n    def compare_images(self, should_equal, other_image):\n        current_image = self.download_current_image()\n        allure.attach(other_image, \"Эталонное изображение\", allure.attachment_type.JPG)\n        allure.attach(current_image, \"Текущее изображение\", allure.attachment_type.JPG)\n        current = Image.open(io.BytesIO(current_image)).convert('RGB')\n        other = Image.open(io.BytesIO(other_image)).convert('RGB')\n        if other.size > current.size:\n            other = other.resize(current.size)\n        elif other.size < current.size:\n            current = current.resize(other.size)\n        equal = list(current.getdata()) == list(other.getdata())\n        prefix = ''\n        if should_equal:\n>           assert equal is True, \"Текущая картинка не равна эталонной\"\nE           AssertionError: Текущая картинка не равна эталонной\n\nsrc/pages/search_results.py:51: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TensorTestCase","time":{"start":1659199986210,"stop":1659199986212,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Текущая картинка не равна эталонной","statusTrace":"self = <test.test_tensor.TensorTestCase testMethod=test_pictures>\n\n    @allure.title('Картинки в яндексе')\n    def test_pictures(self):\n        self.hp.navigation.click_navigation(\"Картинки\", True, Stere.browser)\n        ip = Images_Page(Stere.browser)\n        top_category = ip.popular_items.get_top_item()\n    \n        sr = ip.popular_items.click_category(top_category)\n        sr.search_form.assert_query(top_category)\n        top_result = sr.get_top_result()\n    \n        iv = sr.click_result(top_result)\n        top_image = iv.download_current_image()\n        iv.next()\n        iv.compare_images(False, top_image)\n        iv.prev()\n>       iv.compare_images(True, top_image)\n\ntest/test_tensor.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.pages.search_results.Image_Viewer object at 0x7efc1c7dbe20>\nshould_equal = True\nother_image = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xff\\xdb\\x00C\\x00\\x05\\x04\\x04\\x05\\x04\\x03\\x05\\x0...b8\\xc7j\\xa1\\xdb\\xcbs\\x1d\\xcb\\xd8\\xa9e\\x90\\x1cl\\r\\xbb\\x1dz\\x83]\\xbe\\x97\\xe2\\x99\\\\\\xbcK\\x04h\\xdd\\x17+\\xc5&\\xe8kg\\xff\\xd9'\n\n    @allure.step(\"Сравнить текущую картинку с эталонной. Ожидаемый результат сравнения: {1}\")\n    def compare_images(self, should_equal, other_image):\n        current_image = self.download_current_image()\n        allure.attach(other_image, \"Эталонное изображение\", allure.attachment_type.JPG)\n        allure.attach(current_image, \"Текущее изображение\", allure.attachment_type.JPG)\n        current = Image.open(io.BytesIO(current_image)).convert('RGB')\n        other = Image.open(io.BytesIO(other_image)).convert('RGB')\n        if other.size > current.size:\n            other = other.resize(current.size)\n        elif other.size < current.size:\n            current = current.resize(other.size)\n        equal = list(current.getdata()) == list(other.getdata())\n        prefix = ''\n        if should_equal:\n>           assert equal is True, \"Текущая картинка не равна эталонной\"\nE           AssertionError: Текущая картинка не равна эталонной\n\nsrc/pages/search_results.py:51: AssertionError","steps":[{"name":"Перейти на главную страницу Яндекса","time":{"start":1659199987202,"stop":1659199987220,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Кликнуть на ссылку на раздел \"'Картинки'\" на панели навигации в верхней части страницы","time":{"start":1659199992425,"stop":1659199993079,"duration":654},"status":"passed","steps":[{"name":"Закрыть окно браузера с названием 'Яндекс'","time":{"start":1659199992911,"stop":1659199993079,"duration":168},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"browser","value":"<splinter.driver.webdriver.remote.WebDriver object at 0x7efc1c777280>"},{"name":"window_name","value":"'CDwindow-41E1564D3F94E158B19D65C70426BD18'"},{"name":"title","value":"'Яндекс'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"section","value":"'Картинки'"},{"name":"close_prev_window","value":"True"},{"name":"browser","value":"<splinter.driver.webdriver.remote.WebDriver object at 0x7efc1c777280>"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Перейти в раздел \"Картинки\"","time":{"start":1659199993079,"stop":1659199994312,"duration":1233},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"browser","value":"<splinter.driver.webdriver.remote.WebDriver object at 0x7efc1c777280>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Кликнуть на категорию \"'Морской Котик'","time":{"start":1659199994346,"stop":1659199995025,"duration":679},"status":"passed","steps":[{"name":"Перейти на страницу результатов поиска","time":{"start":1659199995025,"stop":1659199995025,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"mode","value":"'image'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"cat_name","value":"'Морской Котик'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Проверить, что в строке поиска отображается 'Морской Котик'","time":{"start":1659199995025,"stop":1659199995068,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"query","value":"'Морской Котик'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Кликнуть на картинку","time":{"start":1659199995946,"stop":1659199995946,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Кликнуть на стрелку вправо","time":{"start":1659199996834,"stop":1659200001939,"duration":5105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Сравнить текущую картинку с эталонной. Ожидаемый результат сравнения: False","time":{"start":1659200001939,"stop":1659200002809,"duration":870},"status":"passed","steps":[],"attachments":[{"uid":"27a842e020f6247f","name":"Эталонное изображение","source":"27a842e020f6247f.jpg","type":"image/jpg","size":31868},{"uid":"ad8b3f88a038b94f","name":"Текущее изображение","source":"ad8b3f88a038b94f.jpg","type":"image/jpg","size":107765},{"uid":"348615e6057b7596","name":"Сравнение изображений","source":"348615e6057b7596.txt","type":"text/plain","size":66}],"parameters":[{"name":"should_equal","value":"False"},{"name":"other_image","value":"<class 'bytes'>"}],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Кликнуть на стрелку влево","time":{"start":1659200002810,"stop":1659200002913,"duration":103},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Сравнить текущую картинку с эталонной. Ожидаемый результат сравнения: True","time":{"start":1659200002913,"stop":1659200003820,"duration":907},"status":"failed","statusMessage":"AssertionError: Текущая картинка не равна эталонной\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/2022_07_tensor_test_assignment/2022_07_tensor_test_assignment/src/pages/search_results.py\", line 51, in compare_images\n    assert equal is True, \"Текущая картинка не равна эталонной\"\n","steps":[],"attachments":[{"uid":"3f6162d86eae4b00","name":"Эталонное изображение","source":"3f6162d86eae4b00.jpg","type":"image/jpg","size":31868},{"uid":"28f3030fbecb580f","name":"Текущее изображение","source":"28f3030fbecb580f.jpg","type":"image/jpg","size":127092}],"parameters":[{"name":"should_equal","value":"True"},{"name":"other_image","value":"<class 'bytes'>"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":12,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TensorTestCase::0","time":{"start":1659200011945,"stop":1659200011946,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_tensor"},{"name":"subSuite","value":"TensorTestCase"},{"name":"host","value":"fv-az246-511"},{"name":"thread","value":"2720-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_tensor"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"5d6443300745f2e8","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/41//#testresult/5d6443300745f2e8","status":"failed","statusDetails":"AssertionError","time":{"start":1659196928824,"stop":1659196944449,"duration":15625}},{"uid":"6de857efb89c5249","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/39//#testresult/6de857efb89c5249","status":"failed","statusDetails":"AssertionError","time":{"start":1659194295271,"stop":1659194313587,"duration":18316}},{"uid":"a90370f86e506b68","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/38//#testresult/a90370f86e506b68","status":"failed","statusDetails":"AssertionError","time":{"start":1659193948639,"stop":1659193962862,"duration":14223}},{"uid":"474236cc787eb95b","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/37//#testresult/474236cc787eb95b","status":"failed","statusDetails":"AssertionError","time":{"start":1659193812291,"stop":1659193828075,"duration":15784}},{"uid":"ccfe1d233497285e","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/36//#testresult/ccfe1d233497285e","status":"failed","statusDetails":"AssertionError","time":{"start":1659191720033,"stop":1659191734699,"duration":14666}},{"uid":"8e0495c32f8aaff9","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/34//#testresult/8e0495c32f8aaff9","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5723152d70>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1659191418119,"stop":1659191418151,"duration":32}},{"uid":"a4ec9ca0d56c6061","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/33//#testresult/a4ec9ca0d56c6061","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fea7fed6170>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1659191268197,"stop":1659191268219,"duration":22}},{"uid":"db2ce8f094a32e74","reportUrl":"https://schastev.github.io/2022_07_tensor_test_assignment/31//#testresult/db2ce8f094a32e74","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f7ddcf2a1d0>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1659191009401,"stop":1659191009421,"duration":20}}]},"tags":[]},"source":"c1e091dab22d7fab.json","parameterValues":[]}